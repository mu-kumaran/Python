Functions
---------
- help us to group similar tasks, can be reused 'n' number of times and they get executed only when they are called 
- block of code that performs a particular task and may accept optional user inputs and accordingly give outputs.
- defined using def keyword

Arguments and Parameters
------------------------
- parameters: a variable listed inside the paranthesis
- arguments: a value that is sent to the function when it is called

syntax:
-------
def function_name (parameter1,parameter2...):
    //block of code
    return statement

To call a function: function_name(parameter1,parameter2,...)

eg. def sayHello(name):
        print("Hello",name)
        return 0

    def add(num1,num2):
        num3 = num1+num2
        return num3

    sayHello("John")
    print(add(5,6))
    print(add("Manoj ","Kumar"))

Using default arguments
------------------------
- if the argument is not passed, function will consider the default value.
- if the argument is passed, then the passed value will be considered.

eg. def sayHello(name="user"):
        print("Hello",name)
        return 0
    
    sayHello()
    sayHello("John")

Lambda Functions:
-----------------
- shortcut to write and define functions in python
- do not have any name for it - usually called anonymous functions
- very useful when we work with concepts such as Django, Machine Learning and Data Science
- defined using lambda keyword 
- Though syntactically different, behaves in a same way as normal functions behave

syntax:
-------
lambda arguments: expression

- can take any number of arguments but contain only a single expression
- expression may or may not return a value
- lambda functions do not use return keyword

eg. add = lambda num1,num2: num1+num2
    print(add(80,20))

