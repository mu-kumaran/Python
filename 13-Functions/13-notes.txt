Functions
---------
- help us to group similar tasks, can be reused 'n' number of times and they get executed only when they are called 
- block of code that performs a particular task and may accept optional user inputs and accordingly give outputs.
- defined using def keyword

Arguments and Parameters
------------------------
- parameters: a variable listed inside the paranthesis
- arguments: a value that is sent to the function when it is called

syntax:
-------
def function_name (parameter1,parameter2...):
    //block of code
    return statement

To call a function: function_name(parameter1,parameter2,...)

eg. def sayHello(name):
        print("Hello",name)
        return 0

    def add(num1,num2):
        num3 = num1+num2
        return num3

    sayHello("John")
    print(add(5,6))
    print(add("Manoj ","Kumar"))

Using default arguments
------------------------
- if the argument is not passed, function will consider the default value.
- if the argument is passed, then the passed value will be considered.

eg. def sayHello(name="user"):
        print("Hello",name)
        return 0
    
    sayHello()
    sayHello("John")

Lambda Functions:
-----------------
- shortcut to write and define functions in python
- do not have any name for it - usually called anonymous functions
- very useful when we work with concepts such as Django, Machine Learning and Data Science
- defined using lambda keyword 
- Though syntactically different, behaves in a same way as normal functions behave

syntax:
-------
lambda arguments: expression

- can take any number of arguments but contain only a single expression
- expression may or may not return a value
- lambda functions do not use return keyword

eg. add = lambda num1,num2: num1+num2
    print(add(80,20))

map, filter and reduce functions
--------------------------------
- In Python, map(), filter(), and reduce() are powerful built-in functions used for functional programming, enabling you to apply a function to each item in an iterable, filter elements based on a condition, and reduce an iterable to a single value, respectively

map():
-----
- Applies a given function to each item of an iterable (like a list, tuple, etc.) and returns a new iterable (an iterator) with the results.

eg. def square(x):
        return x*x

    numbers = [1,2,3,4,5]
    squared_numbers = map(square,numbers)
    print(list(squared_numbers))

filter():
--------
- Creates a new iterable (an iterator) containing only the elements from the input iterable that satisfy a given condition (function).

eg. def is_even(x):
    return x%2 == 0

    numbers = [1,2,3,4,5,6]
    even_numbers = filter(is_even,numbers)
    print(list(even_numbers))

reduce():
---------
- Applies a function to an iterable (like a list) cumulatively, reducing it to a single value. 
- Note: reduce() is not built-in function in Python 3; it's part of the functools module. 

eg. from functools import reduce
    def add(x,y):
        return x+y

    numbers = [1,2,3,4,5,6,7,8,9,10]

    sum = reduce(add,numbers)
    print(sum)

Inbuilt functions:
-------------------
- are pre-defined functions that already built in python
eg. sum(), round(), range(), len(), sorted() etc

round():
--------
- used to round the float numbers to the required number of decimal places

syntax: 
-------
round(number to round, no of decimal places)

eg. print(round(38.56789,3))

range():
-------
- used to produce defined range of numbers

syntax:
-------
range(start,end,steps)

eg. even_numbers = list(range(2,10,2))
    odd_numbers = list(range(1,10,2))
    whole_numbers = list(range(10))

Multiple Arguments:
------------------
- Multiple arguments passed will be in tuple form inside the function
- When the number of arguments are unknown for a function, They can all be packed into a tuple 

syntax:
------
def function_name(*args)
    # body of the function

eg. def names(*args):
        for i in args:
            print(i)
        print(args)
        print(type(args))
        return args

    name = names("xyz","abc","123")
    print(name)

- The arguments can also be packed into a dictionary.

syntax :  def function_name(**args)
------

eg. def printDictionary(**args):
    for key in args:
        print(key + " : " + args[key])

    printDictionary(Country='Canada',Province='Ontario',City='Toronto')