Data and Databases:
------------------

Data:
----
- Modern applications create a lot of data.
- Data is a raw information that has been collected or created and it can be of any type such as numeric, words, digital and more.
- All these data have to be stored and processed in such a way that one can access them anytime. This data is stored in a database.

Database:
---------
- A database is a systematic collection of data or in simple words, it is an organized collection of data.
- It is a collection of information that is organized so that it can easily be accessed, managed and updated. A data can be stored ,accessed and manipulated in databases.
- Databases play a major role in the development of an application.

Relational Database:
-------------------
- We can categorize database into various categories based on how they store and process data. One of the common types is Relational database.
- A relational database stores the data in the form of tables - a collection of rows and columns like a spreadsheet

RDBMS
-----
- called Relational Database Management System. ( a popular DBMS in the industry)
- a collection of programs that enables the users to access databases, manipulate data, report and represent data and also control access to the database.
- To work with RDBMS, we use something called SQL.
- SQL is the standard language for relational database systems.

SQL
---
- Structured Query Language is the standard programming language for relational databases.
- Using SQL, you can query, update, and reorganize data, as well as create and modify the schema(structure) of a database system and control access to its data.
- There are different versions of the SQL language. Some of the examples are MySQL, MS Access, Oracle, Sybase, Informix, Postgres, SQL server and more of which depend on SQL and use it as the base. 
- We MySQL here to work with python

MySQL
----
- It is a freely available open-source RDBMS that uses SQL.
- It is one of the best RDBMS being used for developing various web-based software applications.
- It is compatible with all the major operating systems and works pretty well with major programming languages such as Java, Python, PHP, C++ and more.

Basic Terminologies
-------------------
- Data in an RDBMS is stored in database objects which are called tables
- This table is basically a collection of related data entries and it consists of numerous columns and rows. Following are related terminologies.

1. Field - Every table is broken up into smaller entities called Fields.
2. Record - A record, also called a row of data, is each individual entry that exists in a table.
3. Column - A column is a vertical entity in a table that contains all information associated with a specific field in a table.
4. NULL value - A NULL value in a table is a value in a field that appears to be blank, which means a field with a NULL value is a field with no value.
5. Primary Key - A primary key helps us to uniquely identify a row in the table. A key value can not occur twice in the table.
6. Foreign Key - A foreign key acts like a link between two tables.

MySQL installation
------------------
- MySQL installer is the easy way to install MySQL on windows
- MySQL installer helps to install MySQL with following components
1. MySQL Server
2. All Available Connectors
3. MySQL Workbench with Sample Data Models
4. MySQL Notifier
5. Tools for Excel and Microsoft Visual Studio
6. MySQL Sample Databases
7. MySQL Documentation

Website : https://dev.mysql.com/downloads/installer/
- Download and run the executable installer file
- choose the full option to install all MySQL products
- MySQL Installer downloads all selected products
- You need to choose a password for the root account
- Keep your root password safely in your PC or anywhere else
- After MySQL installation has been done successfully, search MySQL Command Line Client on the Windows search bar and open it. It will ask for your root password.
- Once the password accessed, you are into the MySQL shell and the installation was successful.

Data Types in MySQL:
-------------------
INT - It is a normal-sized integer. We can specify a width of upto 11 digits. It requires 4 bytes for storage.
FLOAT(m,d) - It is a floating-point number. You can define the display length (m) and the number of decimals (d). This is not required and will default to 10,2 where 2 is the number of decimals, and 10 is the total number of digits (including decimals).
BOOL - It is used only for true and false conditions. It considers numeric value 1 as true and 0 as false
CHAR(size) - It can have a maximum size of 255 characters. Here size is the number of characters to store.
VARCHAR(size) - It can have a maximum size of 255 characters. Here size is the number of characters to store. Variable-length string.

Creating a database in MySQL:
-----------------------------
syntax:
-------
CREATE DATABASE database_name;

- database_name is the name of a new database that should be unique in the MySQL
- Also, every statement in MySQL should terminate with a semicolon

- Now open up your command-line client and enter your password to access the MySQL shell
- Once you are into the shell, hit the below command to create a database named 'pythonx'

CREATE DATABASE pythonx;

output: Query OK, 1 row affected

- If you get the above output, this means your database has been successfully created.

- To show a database list: SHOW DATABASES; 

output:
------
information_schema
mysql
performance_schema
test
pythonx

Using Database:
---------------
- To use a particular database: USE database_name;
eg. USE pythonx
output: Database changed

Deleting Database:
-----------------
- To delete a database completely: DROP DATABASE database_name;
eg. DROP DATABASE pythonx;
output: Query OK, 0 rows affected (0.02 sec)

- To clear command line - system cls
- To get out from wrong command line: ctrl+c

Creating Tables:
---------------
syntax:
-------
CREATE TABLE table_name(col_name1 data_type,col_name2 data_type,....);

Here,
- As we know, CREATE TABLE is the command used to create a table in MySQL
- table_name is the name given to the table
- The elements of the table are defined in the paranthesis. col_name1 data_type is the column definition, where data_type is the column definition, where data_type defines the type of data that will be stored in the column

Eg. Let's create a user table in our 'pythonx' database with the following constraints,
- userId
- username
- email
- userType

- Here, we will make the constraint userId as the PRIMARY KEY. The PRIMARY KEY constraint uniquely identifies each record in the table.
- Primary keys must contain NULL values. Also, a table can have only one PRIMARY KEY,

CREATE TABLE user(userId int PRIMARY KEY, username varchar(10), email varchar(25), userType varchar(10));

Viewing tables:
---------------
To view tables in db: SHOW TABLES;

Deleting tables:
----------------
To delete a table in db: DROP TABLE table_name;

Fetching Data from the table:
----------------------------
- we can fetch the data from the table using SELECT command.
- The SELECT command is used to fetch data from one or more tables. There are different ways of using the SELECT command.
- Following is the most generic syntax of SELECT command

syntax:
-------
SELECT fieldName1,fieldName2,....fieldNameN
FROM tableName1,tableName2...
[WHERE condition]
[GROUP BY field_name(s)]
[HAVING condition]
[ORDER BY field_name(s)];

Here,
SELECT fieldName1,fieldName2,....fieldNameN
FROM tableName1,tableName2...
is the mandatory part of the SELECT command. All other constraints are optional and are used to manipulate and filter the records according to the given condition.

To fetch the whole data from the table we use,
SELECT* FROM tableName;

Inserting data into the table:
-----------------------------
- We can use the INSERT statement to store or add data in the MySQL table within the database.

Syntax:
-------
INSERT INTO table_name VALUES(fieldName1,fieldName2,....fieldNameN)

eg.
INSERT INTO user VALUES(1526,"John","john@example.com","PRO");
INSERT INTO user VALUES(6745,"Smith","Smith@example.com","REGULAR");

output: Query OK, 1 row affected

eg. now fetching all data from table: SELECT * FROM user;
Fetching particular data from the table: SELECT userId,userType from user;

Filtering results using WHERE clause:
-------------------------------------
syntax:
-------
WHERE some_condition;

eg. 
SELECT * FROM user WHERE userType = "PRO";