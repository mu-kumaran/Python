Formatting strings:
-------------------
- Strings are immutable

general method using comma(,):
-----------------------------
user = "manoj"
print("Hello",user)

using str.format with curly braces {}:
--------------------------------------
name = input("Enter your name: ")
age = int(input("Enter your age: "))
print(("Hello, {}. You are {} years old").format(name,age))

Format placeholders:
--------------------
- The placeholders can be identified using named indexes{fname}, numbered indexes {0}{1}{2}..., or even empty indexes {}
- Indexes are basically the count that starts from zero for the parameters passed to format() method

eg. string1 = "My name is {fname}, I am {age} years old".format(fname="manoj",age=33) 
    string2 = "My name is {0}, I am {1} years old".format("manoj",33) 
    string3 = "My name is {}, I am {} years old".format("manoj",33) 

    print(string1)
    print(string2)
    print(string3)

fStrings:
---------
- literal string prefixed with 'f' contains expressions inside braces 
- expressions evaluated at run time
syntax:
-------
f"string values{expression}..."

note: There should not be any gap between letter 'f' and string values

eg. print("f-strings:")
    name = input("Enter your name: ")
    print(f"Hello,{name}!")

    num1 = 10
    num2 = 5
    print(f"Ten plus five equals {num1+num2}")

Index concept (Accessing values):
--------------
- An index is an numerical representation of an item's position in a sequence
- Index always starts with number '0'

syntax:
-------
variable_name[index_number]

 p y t h o n  
 0 1 2 3 4 5
eg. appName = 'PythonX'
    print(appName[0])
    print(appName[1])
    print(appName[2])
    print(appName[3])

Negative indexing:
------------------
- indexing starts from the end of the string with value -1

  p  y  t  h  o  n
 -6 -5 -4 -3 -2 -1

 eg. appName = 'PythonX'
     print(appName[-1])
     print(appName[-2])
     print(appName[-3])
     print(appName[-4])

String slicing:
---------------
- getting substring using slicing method

syntax:
-------
string_name[start:end:step]

start index - included
end index - excluded

eg. appName = 'PythonX'
    print(appName[:])
    print(appName[::])
    print(appName[:4])
    print(appName[2:5])
    print(appName[3:])
    print(appName[::2])


Operations on strings:
-----------------------
1. concatenation
2. Repetition

Concatenation:
--------------
 - addition or joining of strings using 
    1. '+' operator
    2. join() method

eg. firstname = "John"
    lastname = "Doe"
    fullname = firstname +" "+ lastname
    print(fullname) 
    print("".join([firstname,lastname]))

Repetition:
-----------
- multiplication of string by some integer values
- * operator is used for performing string repetition

eg. str = "python"
    print(str*2)

String methods:
---------------
- various methods to manipulate strings
    1. capitalize(x) - converts the first character to uppercase and all other characters to lowercase
    2. count(x) - Returns the no of times the specified value occurs in a string
    3. find(x) - searches the string for a specified value and returns the position where it was found. If it is not found it will
                 return -1
    4. index(x) - searches the string for a specified value and returns the index of position where it was found. If it is not found
                  it will throw an Exception (error)
    5. isalnum() - Returns True if all characters in the string are alphanumeric
    6. isalpha() - Returns True if all characters in the string are alphabet
    7. islower() - Returns True if all characters in the string are lower case
    8. isupper() - Returns True if all characters in the string are upper case
    9. join() - Joins the element of an iterable to the end of the string
    10. lower() - converts the string into lowercase
    11. upper() - converts the string into uppercase
    12. replace(a,b) - Returns the string where a specified value is replaced with specified value
    13. strip() - Returns a trimmed version of the string, that is it removes the whitespaces from both the ends

    Note: All string methods return the new values. They do not change the original string. 
          Because string is immutable in python   

    eg. str = "Python"
        print(str.islower())
        print(str.upper())
        print(str.lower())
        print(str.capitalize())
        print(str.replace('P','A'))

len() method:
-------------
- accepts the string as a parameter and returns the length of the string. It also counts all the whitespaces in the 
  string

eg. str = "Love Python"
    print(len(str))

split() method
--------------
- The method Split splits the string at the specified separator, and returns a list.

Syntax
------
string.split(separator, maxsplit)

Parameters
----------
separator (optional): This is the delimiter at which the string will be split. If not provided, the default separator is any whitespace.
maxsplit (optional): This specifies the maximum number of splits to perform. If not provided, there is no limit on the number of splits.

Return Value:
-------------
The method returns a list of substrings.

eg. #Split the substring into list
    name = "The BodyGuard"
    split_string = (name.split())
    split_string

output : ['The', 'BodyGuard'] 

RegEx module
------------
- In Python, RegEx (short for Regular Expression) is a tool for matching and handling strings.

- This RegEx module provides several functions for working with regular expressions, including search, split, findall, and sub.

- Python provides a built-in module called re, which allows you to work with regular expressions. First, import the re module

search()
--------
- The search() function searches for specified patterns within a string. 

eg. import re
    s1 = "The BodyGuard is the best album"

    # Define the pattern to search for
    pattern = r"Body"

    # Use the search() function to search for the pattern in the string
    result = re.search(pattern, s1)

    # Check if a match was found
    if result:
        print("Match found!")
    else:
        print("Match not found.")

    - Regular expressions (RegEx) are patterns used to match and manipulate strings of text. There are several special sequences in RegEx that can be used to match specific characters or patterns.

Special Sequence	Meaning	                                                        Example
    \d	    Matches any digit character (0-9)	                                    "123" matches "\d\d\d"
    \D	    Matches any non-digit character	                                        "hello" matches "\D\D\D\D\D"
    \w	    Matches any word character (a-z, A-Z, 0-9, and _)	                    "hello_world" matches "\w\w\w\w\w\w\w\w\w\w\w"
    \W	    Matches any non-word character	                                        "@#$%" matches "\W\W\W\W"
    \s	    Matches any whitespace character (space, tab, newline, etc.)	        "hello world" matches "\w\w\w\w\w\s\w\w\w\w\w"
    \S	    Matches any non-whitespace character	                                "hello_world" matches "\S\S\S\S\S\S\S\S\S"
    \b	    Matches the boundary between a word character and a non-word character	"cat" matches "\bcat\b" in "The cat sat on the mat"
    \B	    Matches any position that is not a word boundary	                    "cat" matches "\Bcat\B" in "category" but not in "The cat sat on the mat"

eg. pattern = r"\d\d\d\d\d\d\d\d\d\d"  # Matches any ten consecutive digits
    text = "My Phone number is 1234567890"
    match = re.search(pattern, text)

    if match:
        print("Phone number found:", match.group())
    else:
        print("No match")

output: Phone number found: 1234567890

match.group():
-------------
- The match.group() method is used in Python's re module to retrieve the part of the string where the regular expression pattern matched. Here's a detailed explanation:

Purpose
-------
Extract Matched Text: match.group() returns the exact substring that matched the pattern.
Usage

When you use functions like re.search() or re.match(), they return a match object if the pattern is found. You can then use match.group() to get the matched text.
Here match.group() retrieves the substring 1234567890 from the text, which is the part that matched the pattern.

findall()
---------
- The findall() function finds all occurrences of a specified pattern within a string.

eg1. pattern = r"\W"  # Matches any non-word character
    text = "Hello, world!"
    matches = re.findall(pattern, text)

    print("Matches:", matches)

    output: Matches: [',', ' ', '!']

eg2. s2 = "The BodyGuard is the best album of 'Whitney Houston'."

    # Use the findall() function to find all occurrences of the "st" in the string
    result = re.findall("st", s2)

    # Print out the list of matched words
    print(result)

    output: ['st', 'st']

split()
-------
- A regular expression's split() function splits a string into an array of substrings based on a specified pattern.

eg. # Use the split function to split the string by the "\s"
    s2 = "The BodyGuard is the best album of 'Whitney Houston'."
    split_array = re.split(r"\s", s2)

    # The split_array contains all the substrings, split by whitespace characters
    print(split_array)

    output: ['The', 'BodyGuard', 'is', 'the', 'best', 'album', 'of', "'Whitney", "Houston'."]

sub()
-----
- The sub function of a regular expression in Python is used to replace all occurrences of a pattern in a string with a specified replacement.

eg. s2 = "The BodyGuard is the best album of 'Whitney Houston'."

    # Define the regular expression pattern to search for
    pattern = r"Whitney Houston"

    # Define the replacement string
    replacement = "legend"

    # Use the sub function to replace the pattern with the replacement string
    new_string = re.sub(pattern, replacement, s2, flags=re.IGNORECASE)

    # The new_string contains the original string with the pattern replaced by the replacement string
    print(new_string) 

    output: The BodyGuard is the best album of 'legend'.
