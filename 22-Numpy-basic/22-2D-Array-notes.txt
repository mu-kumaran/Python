Numpy- 2D-arrays
----------------
- This section will focus only on 2D arrays, but you can use Numpy to build arrays of much higher dimensions.

Objectives
----------
1. Basics and array creation in 2D, 
2. Indexing and slicing in 2D
3. Basic operations in 2D

1. Basics and array Creation in 2D
----------------------------------
eg. a = [[1,2,3],[4,5,6],[7,8,9]]
    x = np.array(a)
    print(a)
    print(type(a))
    print(x)
    print(type(x))
    print(x.shape)
    print(x.ndim)
    print(x.size)

- The list contains three nested lists each of equal size.
- The first list represents the first dimension.
- This list contains another set of lists. This represents the second dimension or axes.
- The number of lists the list contains does not have to do with the dimension but the shape of the list.
- We can use the attribute "ndim" to obtain the number of axes or dimensions referred to as the rank.
- The term rank does not refer to the number of linearly independent columns like a matrix.

2. Indexing and slicing in 2D
-----------------------------
- Accessing element through index
    A[0,0], A[1,2], A[2,2]

eg. print(x[0,0])
    print(x[1,2])

    x[1,1] = 45

    print(x)

    print(x[0,0:2])
    print(x[0:2,2])

3. Basic operations in 2D
-------------------------
Matrix addition and subtraction
-------------------------------
eg. a = [[1,2],[3,4]]
    b = [[5,6],[7,8]]
    x = np.array(a)
    y = np.array(b)

    z = x+y
    z_sub = x-y
    print(z)
    print(z_sub)

Hadamard product
----------------
z_prod = x*y
print(z_prod)

Matrix multiplication (dot product)
-----------------------------------
z_mult = np.dot(x,y)
print(z_mult)
print(np.sin(z_multi))

multiply by scalar
------------------
z1 = 2*x
z2 = 5*y
print(z1)
print(z2)

Matrix transformation
----------------------
- Transforms the shape of the matrix row by column as a column by row
eg.
A = np.array([[1,2,3],[4,5,6]])
ATrans = A.T
print(A)
print(A.shape)
print(ATrans)
print(ATrans.shape)

Matrix determinant:
------------------
- To find the determinant of the matrix
eg.
A = np.array([[1,2],[3,4]])
det = np.linalg.det(A)
print(det)

Matrix Inverse:
---------------
- To find the inverse of the matrix
eg. 
A = np.array([[1,2],[3,4]])
A_inv = np.linalg.inv(A)
print(A_inv)