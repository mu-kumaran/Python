Numpy Library:
=============
- Numpy is a library for scientific computing. It has many useful functions. 
- There are many other advantages like speed and memory. 
- Numpy is also the basis for pandas

Objectives
----------
1. The Basics and Array Creation
2. Indexing and Slicing 
3. Basic Operations 
4. Universal Functions

1. The Basics and Array Creation:
---------------------------------
- A "numpy" array or "ndarray" is similar to a list. It's usually fixed in size and each element is of the same type
- We can cast a list to a numpy array

eg. import numpy as np
    a = np.array([1,2,3,4])
    b = np.array([1.1,2.64,3.92,210.56])
    print(a)
    print(type(a))
    print(a.dtype)
    print(a.ndim)
    print(a.shape)
    print(type(b))
    print(b.dtype)

- To get the length and size of the array
eg. print(len(a))
    print(a.size)

Attributes: 
-----------
dtype - datatype of the array
ndim - no of dimensions of the array
shape - gives tuple of matrix dimensions
size - gives the size of the array

2. Indexing and Slicing:
---------------------
- same as list elements for accessing through index and Slicing
 eg. c = np.array([20,1,2,3,4])
    print(c)
    c[0] = 100
    c[4] = 0
    print(c)
    d = c[1:3]
    print(d)
    c[3:5] = 300,400
    print(c)

- we can use a list to select more than one specific index.

eg. x = np.array(list(range(1,11)))
    print(x)

    index = [2,4,6,8]
    print(index)

    y = x[index]
    print(y)

    x[index] = 100
    print(x)

3. Basic Operations
-------------------

Vector addition and subtraction
-------------------------------
u = ai +bj , v = ci + dj
u+v = (a+c)i + (b+d)j ==> [a+c b+d]
u-v = (a-c)i + (b-d)j ==> [a-c b-d]

- Through list operations
eg. u = [1,0]
    v = [0,1]
    z = []
    j = []
    for n,m in zip(u,v):
        z.append(n+m)
        j.append(n-m)
    print(z,j)

- numpy do much more faster operations than list

eg. u = np.array([0,1])
    v = np.array([1,0])
    z = u+v (or) z = np.add(u,v)
    j = u-v (or) j = np.subtract(u,v)
    print(z,j)

Array multiplication with scalar
--------------------------------
eg. x = [0,1]
    y = [1,0]
    u = np.array(x)
    v = np.array(y)
    z = 2*u
    j = 2*v
    print(z,j)

# Through list operation
    l = []
    for n in x:
        l.append(2*n)
    print(l)

Hadamard product
----------------
- Its a vector product, gives vector quantity as a result of multiplication
- u = ai +bj , v = ci + dj 
- u.v = (a*c)i + (b*d)j

eg. x = [1,2]
    y = [3,2]
    u = np.array(x)
    v = np.array(y)
    z = u*v (or) z = np.multiply(u,v)
    print(z)

    l= []
    for n,m in zip(x,y):
        l.append(n*m)

    print(l)

Dot product:
------------
- Its a scalar product, gives scalar quantity as a result of multiplication
 eg. x = [1,2]
    y = [3,2]
    u = np.array(x)
    v = np.array(y)
    z = np.dot(u,v)
    print(z)

    l = 0
    for n,m in zip(x,y):
        l = l + (n*m)
        
    print(l)

Adding constant to an array:
----------------------------
- Adding value to the each element of the array known as broadcasting property of numpy array

eg. u = np.array([1,2,3,-1])
    z = u+1
    print(z)

Universal Functions:
-------------------
- A universal function is a function that operates on n dimensional arrays.

mean()
------
u = np.array([1,2,3,-1])
z = u.mean()

print(z)

max()
-----
u = np.array([1,2,3,5])
z = u.max()

print(z)

standard deviation: std()
-------------------------
u = np.array([1,2,3,5])
std_dev = u.std()

add()
-----
eg. x = [1,2]
    y = [3,2]
    u = np.array(x)
    v = np.array(y)
    sum  = np.add(u,v)

subtract()
----------
eg. sub = np.subtract(u,v)

multiply (Hadamard product)
---------------------------
eg. mult = np.multiply(u,v)

divide()
--------
eg. div = np.divide(u,v)

- We can use numpy to create functions that map numpy arrays to new numpy arrays

pi and sin()
------------
x = np.array([0,np.pi/2,np.pi])
y = np.sin(x)
print(y)

linspace()
----------
x = np.linspace(-2,2,num=5)
y = np.linspace(-2,2,num=9)
print(x)
print(y)

Plotting mathematical functions
-------------------------------
# matplotlib library

import matplotlib.pyplot as plt

# %matplotlib inline --> for jupyter notebook
x = np.linspace(0,2*np.pi,num=100)
y = np.sin(x)

plt.plot(x,y)
plt.title("Sin(x) function")
plt.xlabel("X")
plt.ylabel("Sin(X)")
plt.show()
