Overview of HTTP:
----------------
- When you, the client, use a web page your browser sends an HTTP request to the server where the page is hosted. 
- The server tries to find the desired resource by default "index.html". 
- If your request is successful, the server will send the object to the client in an HTTP response. 
- This includes information like the type of the resource, the length of the resource, and other information.
- The HTTP protocol allows you to send and receive information through the web including webpages, images, and other web resources.
- Resources are nothing but the files stored in the location. Eg. index.html, images.png, file.txt etc

Uniform Resource Locator: URL
-----------------------------
- Uniform resource locator (URL) is the most popular way to find resources on the web. We can break the URL into three parts.
1. scheme - this is this protocol, Mostly it will always be http://
2. Internet address or Base URL - this will be used to find the location here are some examples: www.ibm.com and  www.gitlab.com 
3. route - location on the web server for example: /images/IDSNlogo.png

- We may also hear the term Uniform Resource Identifier (URI), URL are actually a subset of URIs. Another popular term is endpoint, this is the URL of an operation provided by a Web server.

Request 
-------
The process can be broken into the request and response process. The request using the get method is partially illustrated below. In the start line we have the GET method, this is an HTTP method. Also the location of the resource /index.html and the HTTP version. The Request header passes additional information with an HTTP request:

Request Message:
Request Start line: Get/index.html HTTP/1.0
Request Header: User-Agent: python-requests/2.21.0
                            Accept-Encoding:gzip, deflate

- When an HTTP request is made, an HTTP method is sent, this tells the server what action to perform. A list of several HTTP methods is shown below. We will go over more examples later.

http methods: get, post, put, delete
-------------
get - Retrieves data from the server. eg. to get a news data
post - Submits data to the server. eg. to add product newly to the cart
put - Updates data already on server. eg. to cancel the transactions, to add/remove the existing product in the shopping cart
delete - Deletes data from the server.  eg. to empty the cart

Response
--------
The figure below represents the response; the response start line contains the version number HTTP/1.0, a status code (200) meaning success, followed by a descriptive phrase (OK). The response header contains useful information. Finally, we have the response body containing the requested file, an  HTML  document. It should be noted that some requests have headers.

Response Message
----------------
Response Start line - HTTP/1.0 200 OK
Response Header - Server: Apache-
                  Cache: UNCACHEABLE
Response Body - <!DOCTYPE html>
                <html>
                <body>
                <h1>My First Heading</h1>
                <p>My First Paragraph</p>
                </body>
                </html>

- Some status code examples are shown in the table below, the prefix indicates the class. 
1xx - represents informational responses
2xx - represents successful responses
3xx - represents redirects
4xx - represents client errors
5xx - represents server errors
Most commonly used status codes are:

200 - success/OK
201 - CREATED - used in POST or PUT methods.
304 - NOT MODIFIED - used in conditional GET requests to reduce the bandwidth use of the network. Here, the body of the response sent should be empty.
400 - BAD REQUEST - This can be due to validation errors or missing input data.
401- UNAUTHORIZED - This is returned when there is no valid authentication credentials sent along with the request.
403 - FORBIDDEN - sent when the user does not have access (or is forbidden) to the resource.
404 - NOT FOUND - Resource method is not available.
500 - INTERNAL SERVER ERROR - server threw some exceptions while running the method.
502 - BAD GATEWAY - Server was not able to get the response from another upstream server.

Get Request with URL Parameters 
--------------------------------
You can use the GET method to modify the results of your query, for example retrieving data from an API. We send a GET request to the server. Like before we have the Base URL, in the Route we append /get, this indicates we would like to preform a GET request. This is demonstrated in the following table:

Base URL : httbin.org
Route : /get

httbin.org/get

The Base URL is for http://httpbin.org/ is a simple HTTP Request & Response Service. The URL in Python is given by:

url_get = "https://www.httpbin.org/get"

Query string:
------------
A query string is a part of a uniform resource locator (URL), this sends other information to the web server. The start of the query is a ?, followed by a series of parameter and value pairs, as shown in the table below. The first parameter name is name and the value is Joseph. The second parameter name is ID and the Value is 123. Each pair, parameter, and value is separated by an equals sign, =. The series of pairs is separated by the ampersand &.

A web server can handle a Hypertext Transfer Protocol (HTTP) request either by reading a file from its file system based on the URL path or by handling the request using logic that is specific to the type of resource. In cases where special logic is invoked, the query string will be available to that logic for use in its processing, along with the path component of the URL.

start of the query: ?
parameter name: name
value: Joseph
parameter name: ID
value: 123

https://www.httpbin.org/get?Name=Joseph&ID=123

To create a Query string, add a dictionary. The keys are the parameter names and the values are the value of the Query string.

eg. payload={"name":"Joseph","ID":"123"}

Then passing the dictionary payload to the params parameter of the  get() function:

eg. r=requests.get(url_get,params=payload)

We can print out the URL and see the name and values

eg. r.url

Example program
----------------

import requests

url_get = "https://www.httpbin.org/get"
payload={"name":"Joseph","ID":"123"}
r = requests.get(url_get,params = payload)
print(r.url)
print(r.status_code)
print(r.headers.Content-Type)
print(r.content)
print(r.text)
print(r.json())
print(r.json.args)

Post Requests 
-------------
Like a GET request, a POST is used to send data to a server, but the POST request sends the data in a request body. In order to send the Post Request in Python, in the URL we change the route to POST:

url_post='http://httpbin.org/post'

This endpoint will expect data as a file or as a form. A form is convenient way to configure an HTTP request to send data to a server.

To make a POST request we use the post() function, the variable payload is passed to the parameter  data :

r_post=requests.post(url_post,data=payload)

Comparing the URL from the response object of the GET and POST request we see the POST request has no name or value pairs.

print("POST request URL:",r_post.url )
print("GET request URL:",r.url)

We can compare the POST and GET request body, we see only the POST request has a body:

print("POST request body:",r_post.request.body)
print("GET request body:",r.request.body)
print("POST request URL:", r_post.url)  # Use r_post instead of response
print(r_post.headers['Content-Type'])
print(r_post.json())
print(r_post.text)

We can view the form as well:

print(r_post.json()['form'])

Example program:
----------------
import requests

url_post = "https://www.httpbin.org/post"
r_post = requests.post(url_post,data=payload)
print(r_post.url)
print(r_post.status_code)
print(r_post.request.body)
print(r_post.headers['Content-Type'])
print(r_post.json())
print(r_post.text)
print(r_post.json()['form'])
