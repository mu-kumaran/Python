API (Application Program Interface)
----------------------------------
Outline:
-------
- What's an API
- API libraries
- Rest API
    - Request and Response

What's an API?
--------------
- It's software intermediary that allows two applications(or softwares) to talk to each other.
- Its a readymade softwares built to serve necessary data.
- Its just a replica of function call, object call and using libraries.
- Input --> Function --> Output model

objective:
---------
- We cannot build everything from the scratch and we don't want large code lines. So we go for the API call.

eg. Pandas is an API object. Pandas is actually a set of software components, much of which are not even written in Python. We use the pandas API to process the data by communicating with the other Software Components.

import pandas as pd

dict_ = {'a':[11,21,31],'b':[12,22,32]}
df = pd.DataFrame(dict_)
df.head()
df.mean()

- When you create a dictionary, and then create a pandas object with the Dataframe constructor, in API lingo, this is an “instance.”
- The data in the dictionary is passed along to the pandas API.
- You then use the dataframe to communicate with the API.
- When you call the method head, the dataframe communicates with the API, displaying the first few rows of the dataframe. When you call the method mean, the API will calculate the mean and return the values.

What's an REST API?
--------------------
- REST APIs are another popular type of API; they allow you to communicate through the internet allowing you to take advantage of resources like storage, access more data, artificial intelligent algorithms, and much more.
- The RE stands for Representational, the S stands for State, the T stand for Transfer.
- In rest API’s your program is called the client. The API communicates with a web service you call through the internet.
- There is a set of rules regarding Communication, Input or Request, and Output or Response.
- Here are some common terms. You or your code can be thought of as a client.
- The web service is referred to as a resource. The client finds the service via an endpoint.The client sends requests to the resource and the resource gives the response to the client.
- HTTP methods are a way of transmitting data over the internet.
- We tell the Rest API’s what to do by sending a request. The request is usually communicated via an HTTP message.
- The HTTP message usually contains a JSON file. This contains instructions for what operation we would like the service to perform. This operation is transmitted to the webservice via the internet. The service performs the operation.
- In the similar manner, the webservice returns a response via an HTTP message, where the information is usually returned via a JSON file. This information is transmitted back to the client.

REST API - an Brief introduction: (REST - Representational State Transfer)
---------------------------------
- It is a web based API call
- Like a Input-Output model, It is a Client-Request ----> Server-Response model via http protocol
- Server giving the response is called Resource/End points/Routing points
- In REST api's we use api keys and url's to access Server

Example: NBA api by swar patel , write: pip install nba_api 

- The API is always being updated from endpoints at NBA.com.
- It's simple to use so we can focus on the task of collecting data.
- In the nba API, to make a request for a specific team, it's quite simple.
- We don't require a JSON file. All we require is an id. This information is stored locally in the API.

code: (Using nba API static)
-----
from nba_api.stats.static import teams

nba_teams = teams.get_teams()

def dict_nba(nba_teams):
    dt = {}
    temp_list = []

    for i in nba_teams[0].keys():
        for j in range(len(nba_teams)):
            temp_list.append(nba_teams[j].get(i))
        dt[i] = temp_list.copy()    
        temp_list.clear()

    del temp_list
    return dt

df_teams = pd.DataFrame(dict_nba(nba_teams))
print(df_teams.head())

df_warriors = df_teams[df_teams["nickname"]=="Warriors"]
print(df_warriors)
print(df_warriors['id'].values[0])
print(df_warriors[['id']].values[0][0])
id_warriors = df_warriors[['id']].values[0][0]

Explanation:
------------
- We import the module teams. The method "get teams" returns a lists of dictionaries, which have the same keys, but the values depend on the team.
- The dictionary key id has a unique identifier for each team as a value.
- To make things easier, we can convert the dictionary to a table(dataframe).
- Each row contains the information for a different team. We’ll use the team's nickname to find the unique id.
- As an eg. We can find the row that contains the Warriors


Code: # Using nba API dynamic
-----
from nba_api.stats.endpoints import leaguegamefinder

gamefinder = leaguegamefinder.LeagueGameFinder(team_id_nullable=id_warriors)

games = gamefinder.get_data_frames()[0]   # converting from list to dataframe. list has only one element that is dataframe

# print(type(games))
print(games.head(10))

games_home = games[games['MATCHUP']=='GSW vs. HOU']
games_away = games[games['MATCHUP']=='GSW @ HOU']

print(games_home.head(10))
print(games_away.head(10))

import matplotlib.pyplot as plt

fig,ax = plt.subplots()
games_away.plot(x='GAME_DATE',y='PLUS_MINUS',ax=ax)
games_home.plot(x='GAME_DATE',y='PLUS_MINUS',ax=ax)
ax.legend(['@Houston','@homeland'])
plt.title("Golden State Warriors vs Houston Rockets")
plt.show()

Explanation:
------------
- The function "League Game Finder" will make an API call.
- The parameter "team id nullable" is the unique ID for the Warriors.
- Under the hood, the NBA API is making an HTTP request. This is transmitted to NBA.com.
- The information requested is provided and is transmitted via an HTTP response.
- This is assigned to the object “gamefinder.”
- The gamefinder object has a method get data frame, that returns a list which can be converted to dataframe and tored in games variable.
- If we view the dataframe, we can see it contains information about all the games the Warriors played. 
- The PLUS MINUS column contains information on the score. If the value is negative the Warriors lost by that many points; if the value is positive the Warriors won by that amount of points.
- The column Matchup had the team the Warriors were playing; GSW stands for Golden State and HOU means Houston Rockets 
- vs signifies it was a home game and the @ symbol means an away game. 
- We can create two dataframes, one for the games where the Warriors faced the Rockets, at home, and the second for away games.
- We can plot out the PLUS MINUS column for both dataframes.
- We see the Warriors played better at home.

Types:
------
1. REST API
2. SOAP API (Simple Object Access Protocol)
3. GraphQL API
4. RPC API (Remote Procedure Call)
5. Webhooks
6. Partner API
7. Internal API
8. Composite API
9. Library-based API
10. Open API (Public API)
