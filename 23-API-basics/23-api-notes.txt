API (Application Program Interface)
----------------------------------
Outline:
-------
- What's an API
- API libraries
- Rest API
    - Request and Response

What's an API?
--------------
- It's software intermediary that allows two applications(or softwares) to talk to each other.
- Its a readymade softwares built to serve necessary data.
- Its just a replica of function call, object call and using libraries.
- Input --> Function --> Output model

objective:
---------
- We cannot build everything from the scratch and we don't want large code lines. So we go for the API call.

eg. Pandas is an API object. Pandas is actually a set of software components, much of which are not even written in Python. We use the pandas API to process the data by communicating with the other Software Components.

import pandas as pd

dict_ = {'a':[11,21,31],'b':[12,22,32]}
df = pd.DataFrame(dict_)
df.head()
df.mean()

- When you create a dictionary, and then create a pandas object with the Dataframe constructor, in API lingo, this is an “instance.”
- The data in the dictionary is passed along to the pandas API.
- You then use the dataframe to communicate with the API.
- When you call the method head, the dataframe communicates with the API, displaying the first few rows of the dataframe. When you call the method mean, the API will calculate the mean and return the values.

What's an REST API?
--------------------
- REST APIs are another popular type of API; they allow you to communicate through the internet allowing you to take advantage of resources like storage, access more data, artificial intelligent algorithms, and much more.
- The RE stands for Representational, the S stands for State, the T stand for Transfer.
- In rest API’s your program is called the client. The API communicates with a web service you call through the internet.
- There is a set of rules regarding Communication, Input or Request, and Output or Response.
- Here are some common terms. You or your code can be thought of as a client.
- The web service is referred to as a resource. The client finds the service via an endpoint.The client sends requests to the resource and the resource gives the response to the client.
- HTTP methods are a way of transmitting data over the internet.
- We tell the Rest API’s what to do by sending a request. The request is usually communicated via an HTTP message.
- The HTTP message usually contains a JSON file. This contains instructions for what operation we would like the service to perform. This operation is transmitted to the webservice via the internet. The service performs the operation.
- In the similar manner, the webservice returns a response via an HTTP message, where the information is usually returned via a JSON file. This information is transmitted back to the client.

REST API - an Brief introduction: (REST - Representational State Transfer)
---------------------------------
- It is a web based API call
- Like a Input-Output model, It is a Client-Request ----> Server-Response model via http protocol
- Server giving the response is called Resource/End points/Routing points
- In REST api's we use api keys and url's to access Server

Example: NBA api by swar patel , write: pip install nba_api 

- The API is always being updated from endpoints at NBA.com.
- It's simple to use so we can focus on the task of collecting data.
- In the nba API, to make a request for a specific team, it's quite simple.
- We don't require a JSON file. All we require is an id. This information is stored locally in the API.

code:
-----
    from nba_api.stats.static import teams

    nba_teams = teams.get_teams()

    print(nba_teams[:2])

Explanation:
------------
- We import the module teams. The method "get teams" returns a lists of dictionaries, which have the same keys, but the values depend on the team.
- The dictionary key id has a unique identifier for each team as a value.

Types:
------
1. REST API
2. SOAP API (Simple Object Access Protocol)
3. GraphQL API
4. RPC API (Remote Procedure Call)
5. Webhooks
6. Partner API
7. Internal API
8. Composite API
9. Library-based API
10. Open API (Public API)
