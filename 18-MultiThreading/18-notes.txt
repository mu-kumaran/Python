MultiThreading (Multitasking)
--------------
Introduction
------------
- Many times, while using the computer, you might have performed multiple tasks at the same time such as coding on your IDE, listening to songs, brwosing on the browser and more
- As a human, we often perform multiple tasks at the same time, and this is termed as multitasking.
- Similarly, in the above example, the computer is also executing various tasks at the same time such as running the code editor, playing the song, running the browser and more.
- Modern computers have the ability to perform multiple tasks at the same time, which is also called multitasking in simple words and multithreading in programming terms. 

Important note :
---------------
- multithreading is all about quickly switching between different tasks but not at the sametime (means not simultaneously or not parallely) which is called concurrency.concurrency is all about managing multiple tasks. So switching between different tasks doesn't mean running different tasks simultaneously. 
- As an eg. single chef cooks and give the several dishes one by one very fastly looks like multiple chefs prepared the multiple dishes at a time  

Multiple tasks
--------------
- As we have seen, we perform multiple tasks daily. Similarly, computers can slo perform various tasks at the sametime.
- For eg. If you are coding Python, one task that the computer could do is run the python IDE.
- Now if you gets an error, you might directly switch to your browser and search that error on google. Here, the computer will have to handle another task of executing the browser.
- Therefore in this way, there would be many scenarios where the computer might need to multitask.

Breaking Down
-------------
- Each tasks on the computer is handled by a process. Each process is handled by something called a thread.
- Thus at the most basic level, a thread is responsible for executing the various tasks on the computer.

            Task ---> Process ---> Thread

What is the Process?
-------------------
- A process is basically the program in execution. When you start an application on your computer, the operating system creates a process.
- A process is an instance of computer program being executed

What is Thread?
---------------
- A thread is an entity within the process that can be scheduled for execution. Also, it is the smallest unit of processing that can be performed in an Operating system.
- In simple words, a thread is a sequence of instructions within a program that can be executed independently of other code.
- A thread is the smallest sequence of programmed instructions that a scheduler can manage independently. It's essentially a set of instructions that can be executed by a CPU core. 

Threads vs cores
----------------
- A core is a physical processing unit within a CPU, capable of executing instructions. 
- Threads: allow a single core to handle multiple tasks concurrently, providing the illusion of concurrent execution. 

What is multithreading?
----------------------
- ability of a processor to execute multiple threads concurrently (which means one by one fastly)
- Central Processing Unit (CPU) or a single core in a multi-core processor executes multiple processes or threads concurrently, appropriately supported by the operating system

Example:
 - Assume that you are using Amazon. While using you might search for the items you wish to buy. So you would click on the search button, one thread will fetch the data from the database related to earphones. 
 - Another thread (which is the main thread), will maintain the current screen until the search thread fetches the data.
 - Therefore at the sametime two tasks are running, on the backgorund (which is the search thread) and the second is the main thread (which maintains the current screen on the app until the search thread completes fetching the data)   

Multithreading vs Multiprocessing
---------------------------------
- As with multithreading the processes and threads have to share the resources of a single or multiple cores. Multithreading aims to increase the utilization of a single core by using thread-level as well as instruction-level parallelism
- While multiprocessing systems include multiple processing units means multiple CPU's

Modules for threading in python:
-------------------------------
- Python provides following two modules to implement threading in python
    1. The thread module
    2. The threading module

- thread module has long been deprecated in python3. Now only threading module is used

Threading module
----------------
- The Threading module is the high-level implementation of threading in python and the defacto standard for managing multithreaded applications

Functions provided by threading module:

- activeCount() - returns the count of thread objects which are still alive
- currentThread() - returns the current object of the Thread class
- enumerate() - returns the lists of all active Thread objects
- isDaemon() - returns true if the thread is a daemon 
- isAlive() - returns true if the thread is still alive

Thread class
------------
- The thread class is the primary class that defines the template and the operations of a thread in python
- It provides all functionalities required to create and manage a thread
- The most simple way to create a multithreaded python application is to declare a class that inherits from the Thread class and override it's run method()
- Therefore, every Thread class has a run() method, and to implement threading, one should override the run() method in their respective classes.
- Once we inherit a class from the Thread class in the threading module, we can create a Thread object from it.
- Normally, the whole program is executed by something called the main() thread, but when we create a thread object, each object represents an activity to be performed in a separate a thread of control.

Thread Class Methods
--------------------
run() - It denotes the activity of a thread and can be overrridden by a class that extends the Thread class
start() - It starts tha activity of a thread. It must be called only once for each thread because it will throw a runtime error if called multiple times
join() - It blocks the execution of other code until the thread on which the join() method was called gets terminated.

- This is how it works,
    Once a thread object has been made, the start() method can be used to begin the execution of the activity, and the join() method can be used to block all other code till the current activity finishes. 